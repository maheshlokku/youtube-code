pipeline {
    agent { label 'JNode' }

    environment {
        APP_NAME        = 'crm'
        RELEASE         = '1.0.0'
        IMAGE_TAG       = "${RELEASE}-${BUILD_NUMBER}"
        ACR_REGISTRY    = 'sixz23.azurecr.io'
        FRONTEND_PATH   = 'apps/web'
        BACKEND_PATH    = 'apps/api'
        FRONTEND_IMAGE  = "${ACR_REGISTRY}/${APP_NAME}-frontend"
        BACKEND_IMAGE   = "${ACR_REGISTRY}/${APP_NAME}-backend"
    }

    tools {
        nodejs 'Node18'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/bytex-analytics/crm.git',
                        credentialsId: 'github-token'
                    ]]
                ])
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                dir("${FRONTEND_PATH}") {
                    sh '''
                        echo " Cleaning existing frontend artifacts and caches..."
                        rm -rf node_modules package-lock.json .next dist out build
                        npm cache verify
                        npm cache clean --force
                        npm install

                        echo " Installing dev dependencies..."
                        npm install tr46@0.0.3 --save-exact
                        npm install dataloader && npm install ioredis
                        npm install --save-dev @types/jsonwebtoken @types/cookie-parser
                        npm install @nestjs/common @nestjs/core @nestjs/graphql @nestjs/apollo @nestjs/config
                        rm -f node_modules/tr46/lib/mappingTable.json
                    '''
                }
            }
        }

        stage('Build Frontend') {
            steps {
                withCredentials([
                    string(credentialsId: 'NEXT_PUBLIC_SUPABASE_URL', variable: 'NEXT_PUBLIC_SUPABASE_URL'),
                    string(credentialsId: 'NEXT_PUBLIC_SUPABASE_ANON_KEY', variable: 'NEXT_PUBLIC_SUPABASE_ANON_KEY'),
                    string(credentialsId: 'NEXTAUTH_SECRET', variable: 'NEXTAUTH_SECRET'),
                    string(credentialsId: 'NEXTAUTH_URL', variable: 'NEXTAUTH_URL'),
                    string(credentialsId: 'EMAIL_USER', variable: 'EMAIL_USER'),
                    string(credentialsId: 'EMAIL_PASSWORD', variable: 'EMAIL_PASSWORD')
                ]) {
                    dir("${FRONTEND_PATH}") {
                        sh '''
                            echo " Writing environment variables to .env file..."
                            cat <<EOF > .env
                              NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
                              NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY
                              NEXT_PUBLIC_API_URL=http://localhost:4000/graphql
                              NEXTAUTH_SECRET=$NEXTAUTH_SECRET
                              NEXTAUTH_URL=$NEXTAUTH_URL
                              EMAIL_USER=$EMAIL_USER
                              EMAIL_PASSWORD=$EMAIL_PASSWORD
                            EOF

                            echo " Building the frontend..."
                            npm run build
                        '''
                    }
                }
            }
        }

        stage('Login to ACR') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'Acr-credentials',
                    usernameVariable: 'ACR_USERNAME',
                    passwordVariable: 'ACR_PASSWORD'
                )]) {
                    sh '''
                        echo $ACR_PASSWORD | docker login ${ACR_REGISTRY} -u $ACR_USERNAME --password-stdin
                    '''
                }
            }
        }

        stage('Build & Push Frontend Image') {
            steps {
                script {
                    def imageNameWithTag = "${FRONTEND_IMAGE}:${IMAGE_TAG}"
                    sh """
                        docker build -t ${imageNameWithTag} -f ${FRONTEND_PATH}/Dockerfile .
                        docker push ${imageNameWithTag}
                        docker tag ${imageNameWithTag} ${FRONTEND_IMAGE}:latest
                        docker push ${FRONTEND_IMAGE}:latest
                    """
                }
            }
        }

        stage('Build & Push Backend Image') {
            steps {
                script {
                    def imageNameWithTag = "${BACKEND_IMAGE}:${IMAGE_TAG}"
                    sh """
                        docker build -t ${imageNameWithTag} -f ${BACKEND_PATH}/Dockerfile .
                        docker push ${imageNameWithTag}
                        docker tag ${imageNameWithTag} ${BACKEND_IMAGE}:latest
                        docker push ${BACKEND_IMAGE}:latest
                    """
                }
            }
        }

        stage('Cleanup Workspace & Docker') {
            steps {
                sh '''
                    echo "Running workspace and Docker cleanup..."

                    # Clean frontend build artifacts
                    rm -rf ${FRONTEND_PATH}/node_modules ${FRONTEND_PATH}/.next ${FRONTEND_PATH}/dist ${FRONTEND_PATH}/out ${FRONTEND_PATH}/build

                    # Clean npm cache
                    npm cache clean --force

                    # Remove unused containers, networks, images (dangling + unused), and build cache
                    docker system prune -a -f
                    # Remove unused volumes (optional, can be skipped if volumes are needed)
                    docker volume prune -f
                    # Clean npm cache
                    npm cache clean --force || true

                    # Clean Jenkins workspace folders (except for essential files)
                    find . -name "node_modules" -type d -prune -exec rm -rf '{}' +

                    # Clean build artifacts if present
                    rm -rf */.next */dist */build */out

                   echo "  complete. Disk usage after cleanup:"
                   df -h /

                    # Clean APT and system logs
                    sudo apt-get clean
                    sudo journalctl --vacuum-time=3d || true
                    sudo rm -rf /var/log/*.gz /var/log/*.1 || true

                    echo "Cleanup completed."
                '''
            }
        }
    }

    post {
        success {
            echo " Frontend and Backend images pushed successfully to ACR. Cleanup complete."
        }
        failure {
            echo " Build or push failed. Check logs."
        }
    }
}
