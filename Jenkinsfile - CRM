pipeline {
    agent { label 'JAgent-Node' }

    environment {
        APP_NAME        = 'crm'
        RELEASE         = '1.0.0'
        IMAGE_TAG       = "${RELEASE}-${BUILD_NUMBER}"
        FRONTEND_PATH   = 'crm'
        BACKEND_PATH    = 'crm'

        DOCKERHUB_USERNAME = 'maheshlokku1999'
        FRONTEND_DH_IMAGE  = "${DOCKERHUB_USERNAME}/${APP_NAME}-frontend"
        BACKEND_DH_IMAGE   = "${DOCKERHUB_USERNAME}/${APP_NAME}-backend"

        ACR_REGISTRY     = 'crmctrsy.azurecr.io'
        FRONTEND_ACR_IMG = "${ACR_REGISTRY}/${APP_NAME}-frontend"
        BACKEND_ACR_IMG  = "${ACR_REGISTRY}/${APP_NAME}-backend"

        STORAGE_ACCOUNT  = 'crmstr'
        CONTAINER_NAME   = 'crmctr'
        ARCHIVE_NAME     = 'crm.zip'

        AKS_CLUSTER_NAME   = 'crm-clstr'
        AKS_RESOURCE_GROUP = 'datavalley_resource_groups'

        // Enable Docker BuildKit
        DOCKER_BUILDKIT = '1'
    }

    tools {
        nodejs 'Node18'
    }

    options {
        timeout(time: 15, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/bytex-analytics/crm.git',
                        credentialsId: 'github-token',
                        shallow: true,
                        depth: 1
                    ]]
                ])
            }
        }

        stage('Compress Project for Blob Storage') {
            steps {
                sh '''
                    echo "Installing Azure CLI if not installed..."
                    if ! command -v az &> /dev/null; then
                        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                    fi

                    echo "Installing zip..."
                    sudo apt-get update && sudo apt-get install -y zip

                    echo "Zipping project files..."
                    zip -r ${ARCHIVE_NAME} . -x '*.git*' 'node_modules/*' '*.DS_Store'
                '''
            }
        }

        stage('Upload to Azure Blob Storage') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'crmazrstact',
                        usernameVariable: 'AZURE_STORAGE_ACCOUNT',
                        passwordVariable: 'AZURE_STORAGE_KEY'
                    )
                ]) {
                    sh '''
                        echo "Uploading ZIP to Azure Blob Storage..."
                        az storage blob upload \
                          --account-name $AZURE_STORAGE_ACCOUNT \
                          --account-key $AZURE_STORAGE_KEY \
                          --container-name ${CONTAINER_NAME} \
                          --file ${ARCHIVE_NAME} \
                          --name uploads/${ARCHIVE_NAME} \
                          --overwrite
                    '''
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                dir("${FRONTEND_PATH}") {
                    sh '''
                        echo "Installing frontend dependencies..."
                        rm -rf node_modules package-lock.json .next dist out build
                        npm cache clean --force
                        npm ci
                    '''
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                dir("${BACKEND_PATH}") {
                    sh '''
                        echo "Installing backend dependencies..."
                        rm -rf node_modules package-lock.json dist
                        npm ci
                    '''
                }
            }
        }

        stage('Build & Push Docker Images') {
            parallel {
                stage('Backend Build & Push') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'NEON_DATABASE_URL', variable: 'NEON_DATABASE_URL'),
                            string(credentialsId: 'JWT_SECRET', variable: 'JWT_SECRET'),
                            usernamePassword(
                                credentialsId: 'dockerhub-token',
                                usernameVariable: 'DOCKERHUB_USERNAME',
                                passwordVariable: 'DOCKERHUB_PASSWORD'
                            )
                        ]) {
                            dir("${BACKEND_PATH}") {
                                sh '''
                                    echo "Creating .env file for backend..."
                                    cat <<EOF > .env
                                       NEON_DATABASE_URL=$NEON_DATABASE_URL
                                       JWT_SECRET=$JWT_SECRET
                                     EOF
                                    npm run build
                                    echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin

                                    docker build -t ${BACKEND_ACR_IMG}:${IMAGE_TAG} -f Dockerfile-api .
                                    docker push ${BACKEND_ACR_IMG}:${IMAGE_TAG}
                                    docker tag ${BACKEND_ACR_IMG}:${IMAGE_TAG} ${BACKEND_ACR_IMG}:v1
                                    docker push ${BACKEND_ACR_IMG}:v1

                                    docker tag ${BACKEND_ACR_IMG}:${IMAGE_TAG} ${BACKEND_DH_IMAGE}:${IMAGE_TAG}
                                    docker push ${BACKEND_DH_IMAGE}:${IMAGE_TAG}
                                '''
                            }
                        }
                    }
                }

                stage('Frontend Build & Push') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'NEON_DATABASE_URL', variable: 'NEON_DATABASE_URL'),
                            string(credentialsId: 'NEXTAUTH_SECRET', variable: 'NEXTAUTH_SECRET'),
                            usernamePassword(
                                credentialsId: 'dockerhub-token',
                                usernameVariable: 'DOCKERHUB_USERNAME',
                                passwordVariable: 'DOCKERHUB_PASSWORD'
                            )
                        ]) {
                            dir("${FRONTEND_PATH}") {
                                sh '''
                                    echo "Creating .env file for frontend..."
                                    cat <<EOF > .env
                                      NEXTAUTH_SECRET=$NEXTAUTH_SECRET
                                      NEXTAUTH_URL=http://localhost:3000
                                      NEON_DATABASE_URL=$NEON_DATABASE_URL
                                    EOF
                                    npm run build
                                    echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin

                                    docker build -t ${FRONTEND_ACR_IMG}:${IMAGE_TAG} -f Dockerfile-web .
                                    docker push ${FRONTEND_ACR_IMG}:${IMAGE_TAG}
                                    docker tag ${FRONTEND_ACR_IMG}:${IMAGE_TAG} ${FRONTEND_ACR_IMG}:v1
                                    docker push ${FRONTEND_ACR_IMG}:v1

                                    docker tag ${FRONTEND_ACR_IMG}:${IMAGE_TAG} ${FRONTEND_DH_IMAGE}:${IMAGE_TAG}
                                    docker push ${FRONTEND_DH_IMAGE}:${IMAGE_TAG}
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Install kubectl and Azure CLI') {
            steps {
                sh '''
                    if ! command -v az &> /dev/null; then
                        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                    fi

                    if ! command -v kubectl &> /dev/null; then
                        sudo az aks install-cli
                    fi
                '''
            }
        }

        stage('Deploy to AKS') {
            steps {
                withCredentials([azureServicePrincipal(
                    credentialsId: 'azrstact',
                    subscriptionIdVariable: 'AZ_SUBSCRIPTION_ID',
                    clientIdVariable: 'AZ_CLIENT_ID',
                    clientSecretVariable: 'AZ_CLIENT_SECRET',
                    tenantIdVariable: 'AZ_TENANT_ID'
                )]) {
                    sh '''
                        az login --service-principal \
                            --username $AZ_CLIENT_ID \
                            --password $AZ_CLIENT_SECRET \
                            --tenant $AZ_TENANT_ID > /dev/null

                        az account set --subscription $AZ_SUBSCRIPTION_ID
                        az aks get-credentials --resource-group ${AKS_RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --overwrite-existing

                        sed "s|IMAGE_TAG|${IMAGE_TAG}|g" k8s/backend-deployment.yaml | kubectl apply -f -
                        sed "s|IMAGE_TAG|${IMAGE_TAG}|g" k8s/frontend-deployment.yaml | kubectl apply -f -
                        kubectl apply -f k8s/backend-service.yaml
                        kubectl apply -f k8s/frontend-service.yaml
                    '''
                }
            }
        }

        stage('System Cleanup - Disk Space Management') {
            steps {
                sh '''
                    echo "Disk usage before cleanup:"
                    df -h

                    echo "Cleaning /tmp and empty dirs..."
                    sudo find /tmp -type f -atime +1 -delete || true
                    sudo find /tmp -type d -empty -delete || true

                    echo "Cleaning Jenkins workspace cache..."
                    if [ -d /var/lib/jenkins/workspace/ ]; then
                        sudo find /var/lib/jenkins/workspace/ -mindepth 1 -maxdepth 3 -exec rm -rf {} +
                    else
                        echo "Jenkins workspace directory does not exist, skipping cleanup."
                    fi

                    echo "Disk usage after cleanup:"
                    df -h
                '''
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker system...'
            sh 'docker system prune -af --volumes || true'
        }
    }
}
