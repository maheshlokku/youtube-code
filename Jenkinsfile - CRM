pipeline {
    agent { label 'JNode' }

    environment {
        APP_NAME        = 'crm'
        RELEASE         = '1.0.0'
        DOCKER_USER     = 'maheshlokku1999'
        IMAGE_TAG       = "${RELEASE}-${BUILD_NUMBER}"
        BUILD_ARCHIVE   = "build-${BUILD_NUMBER}.zip"
        CONTAINER_NAME  = 'hubctr' // Azure Blob container name
    }

    tools {
        nodejs 'Node18'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/bytex-analytics/crm.git',
                        credentialsId: 'github-token'
                    ]]
                ])
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                dir('apps/web') {
                    sh '''
                        rm -rf node_modules package-lock.json .next dist out build
                        npm cache verify
                        npm cache clean --force
                        npm install

                        echo " Installing dev dependencies..."
                        npm install tr46@0.0.3 --save-exact
                        npm install --save-dev @types/jsonwebtoken @types/cookie-parser
                        rm -f node_modules/tr46/lib/mappingTable.json
                    '''
                }
            }
        }

        stage('Build Frontend') {
            steps {
                withCredentials([
                    string(credentialsId: 'NEXT_PUBLIC_SUPABASE_URL', variable: 'NEXT_PUBLIC_SUPABASE_URL'),
                    string(credentialsId: 'NEXT_PUBLIC_SUPABASE_ANON_KEY', variable: 'NEXT_PUBLIC_SUPABASE_ANON_KEY'),
                    string(credentialsId: 'NEXTAUTH_SECRET', variable: 'NEXTAUTH_SECRET'),
                    string(credentialsId: 'NEXTAUTH_URL', variable: 'NEXTAUTH_URL'),
                    string(credentialsId: 'EMAIL_USER', variable: 'EMAIL_USER'),
                    string(credentialsId: 'EMAIL_PASSWORD', variable: 'EMAIL_PASSWORD')
                ]) {
                    dir('apps/web') {
                        sh '''
                            echo " Writing environment variables to .env file..."
                            cat <<EOF > .env
                              NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
                              NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY
                              NEXT_PUBLIC_API_URL=http://localhost:4000/graphql
                              NEXTAUTH_SECRET=$NEXTAUTH_SECRET
                              NEXTAUTH_URL=$NEXTAUTH_URL
                              EMAIL_USER=$EMAIL_USER
                              EMAIL_PASSWORD=$EMAIL_PASSWORD
                            EOF

                            echo " Building the frontend..."
                            npm run build
                        '''
                    }
                }
            }
        }

        stage('Build & Push Frontend Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-token', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-token') {
                            def feImage = docker.build("${DOCKER_USER}/${APP_NAME}-frontend:${IMAGE_TAG}", "-f apps/web/Dockerfile .")
                            feImage.push()
                            feImage.push("latest")
                        }
                    }
                }
            }
        }

        stage('Build & Push Backend Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-token', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-token') {
                            def beImage = docker.build("${DOCKER_USER}/${APP_NAME}-backend:${IMAGE_TAG}", "-f apps/api/Dockerfile .")
                            beImage.push()
                            beImage.push("latest")
                        }
                    }
                }
            }
        }

        stage('Generate Metadata & Upload to Azure') {
            steps {
                withCredentials([usernamePassword(credentialsId:'azrstact', usernameVariable: 'AZURE_ACCOUNT', passwordVariable: 'AZURE_KEY')]) {
                    script {
                        def metadata = """
                        {
                            "frontendImage": "${DOCKER_USER}/${APP_NAME}-frontend:${IMAGE_TAG}",
                            "backendImage": "${DOCKER_USER}/${APP_NAME}-backend:${IMAGE_TAG}",
                            "buildNumber": "${BUILD_NUMBER}",
                            "timestamp": "${new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone('UTC'))}"
                        }
                        """.stripIndent()

                        writeFile file: 'metadata.json', text: metadata

                        sh '''
                        az storage blob upload \
                            --account-name "$AZURE_ACCOUNT" \
                            --account-key "$AZURE_KEY" \
                            --container-name "$CONTAINER_NAME" \
                            --file metadata.json \
                            --name "metadata/metadata-${BUILD_NUMBER}.json"
                        '''
                    }
                }
            }
        }

        stage('Compress & Upload Project Archive') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'azrstact', usernameVariable: 'AZURE_ACCOUNT', passwordVariable: 'AZURE_KEY')]) {
                    sh '''
                        sudo apt update && sudo apt install zip -y
                        zip -r ${BUILD_ARCHIVE} . -x '*.git*' -x 'node_modules/*' -x '*.DS_Store'

                        az storage blob upload \
                            --account-name "$AZURE_ACCOUNT" \
                            --account-key "$AZURE_KEY" \
                            --container-name "$CONTAINER_NAME" \
                            --file "${BUILD_ARCHIVE}" \
                            --name "archives/${APP_NAME}/${BUILD_ARCHIVE}"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo " Build, Docker push, metadata upload, and project archive upload succeeded."
        }
        failure {
            echo " Build or upload failed. Please check logs."
        }
    }
}
