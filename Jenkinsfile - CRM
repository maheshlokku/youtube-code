pipeline {
    agent { label 'JAgent-Node' }

    environment {
        // App metadata
        APP_NAME        = 'crm'
        RELEASE         = '1.0.0'
        IMAGE_TAG       = "${RELEASE}-${BUILD_NUMBER}"
        FRONTEND_PATH   = 'apps/web'
        BACKEND_PATH    = 'apps/api'

        // DockerHub details
        DOCKERHUB_USERNAME = 'maheshlokku1999'
        FRONTEND_DH_IMAGE  = "${DOCKERHUB_USERNAME}/${APP_NAME}-frontend"
        BACKEND_DH_IMAGE   = "${DOCKERHUB_USERNAME}/${APP_NAME}-backend"

        // ACR details
        ACR_REGISTRY     = 'crmctrsy.azurecr.io'
        FRONTEND_ACR_IMG = "${ACR_REGISTRY}/${APP_NAME}-frontend"
        BACKEND_ACR_IMG  = "${ACR_REGISTRY}/${APP_NAME}-backend"

        // Azure Blob Storage
        STORAGE_ACCOUNT  = 'crmstr'
        CONTAINER_NAME   = 'crmctr'
        ARCHIVE_NAME     = 'crm.zip'
    }

    tools {
        nodejs 'Node18'
    }

    stages {

        stage('Checkout from GitHub') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/bytex-analytics/crm.git',
                        credentialsId: 'github-token'
                    ]]
                ])
            }
        }

        stage('Compress Project for Blob Storage') {
            steps {
                sh '''
                    echo "Installing Azure CLI if not installed..."
                    if ! command -v az &> /dev/null; then
                    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                  else
                    echo "Azure CLI already installed."
                  fi
                
                   echo "Installing zip if not already installed..."
                   sudo apt-get update && sudo apt-get install -y zip
                    
                   echo "Zipping project files..."
                   zip -r ${ARCHIVE_NAME} . -x '*.git*' 'node_modules/*' '*.DS_Store'
                '''
            }
        }

        stage('Upload to Azure Blob Storage') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'azrstact',
                        usernameVariable: 'AZURE_STORAGE_ACCOUNT',
                        passwordVariable: 'AZURE_STORAGE_KEY'
                    )
                ]) {
                    sh '''
                        echo "Uploading ZIP to Azure Blob Storage..."
                        az storage blob upload \
                          --account-name $AZURE_STORAGE_ACCOUNT \
                          --account-key $AZURE_STORAGE_KEY \
                          --container-name ${CONTAINER_NAME} \
                          --file ${ARCHIVE_NAME} \
                          --name uploads/${ARCHIVE_NAME} \
                          --overwrite
                    '''
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                dir("${FRONTEND_PATH}") {
                    sh '''
                        echo "Cleaning and installing frontend dependencies..."
                        rm -rf node_modules package-lock.json .next dist out build
                        npm cache verify
                        npm cache clean --force
                        npm install
                        npm install tr46@0.0.3 --save-exact
                        npm install dataloader ioredis
                        npm install --save-dev @types/jsonwebtoken @types/cookie-parser
                        npm install @nestjs/common @nestjs/core @nestjs/graphql @nestjs/apollo @nestjs/config
                        rm -f node_modules/tr46/lib/mappingTable.json
                    '''
                }
            }
        }

        stage('Build Frontend') {
            steps {
                withCredentials([
                    string(credentialsId: 'NEXT_PUBLIC_SUPABASE_URL', variable: 'NEXT_PUBLIC_SUPABASE_URL'),
                    string(credentialsId: 'NEXT_PUBLIC_SUPABASE_ANON_KEY', variable: 'NEXT_PUBLIC_SUPABASE_ANON_KEY'),
                    string(credentialsId: 'NEXTAUTH_SECRET', variable: 'NEXTAUTH_SECRET'),
                    string(credentialsId: 'NEXTAUTH_URL', variable: 'NEXTAUTH_URL'),
                    string(credentialsId: 'EMAIL_USER', variable: 'EMAIL_USER'),
                    string(credentialsId: 'EMAIL_PASSWORD', variable: 'EMAIL_PASSWORD')
                ]) {
                    dir("${FRONTEND_PATH}") {
                        sh '''
                            echo "Writing .env file..."
                            cat <<EOF > .env
                              NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
                              NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY
                              NEXT_PUBLIC_API_URL=http://localhost:4000/graphql
                              NEXTAUTH_SECRET=$NEXTAUTH_SECRET
                              NEXTAUTH_URL=$NEXTAUTH_URL
                              EMAIL_USER=$EMAIL_USER
                              EMAIL_PASSWORD=$EMAIL_PASSWORD
                            EOF
                            npm run build
                        '''
                    }
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'dockerhub-token',
                    usernameVariable: 'DOCKERHUB_USERNAME',
                    passwordVariable: 'DOCKERHUB_PASSWORD'
                )]) {
                    sh '''
                        echo "Logging into DockerHub..."
                        echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                    '''
                }
            }
        }

        stage('Build & Push to DockerHub') {
            steps {
                script {
                    sh '''
                        echo "Building and pushing frontend image to DockerHub..."
                        docker build -t ${FRONTEND_DH_IMAGE}:${IMAGE_TAG} -f ${FRONTEND_PATH}/Dockerfile .
                        docker push ${FRONTEND_DH_IMAGE}:${IMAGE_TAG}
                        docker tag ${FRONTEND_DH_IMAGE}:${IMAGE_TAG} ${FRONTEND_DH_IMAGE}:latest
                        docker push ${FRONTEND_DH_IMAGE}:latest

                        echo "Building and pushing backend image to DockerHub..."
                        docker build -t ${BACKEND_DH_IMAGE}:${IMAGE_TAG} -f ${BACKEND_PATH}/Dockerfile .
                        docker push ${BACKEND_DH_IMAGE}:${IMAGE_TAG}
                        docker tag ${BACKEND_DH_IMAGE}:${IMAGE_TAG} ${BACKEND_DH_IMAGE}:latest
                        docker push ${BACKEND_DH_IMAGE}:latest
                    '''
                }
            }
        }

        stage('Login to Azure ACR') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'Acr-credentials',
                    usernameVariable: 'ACR_USERNAME',
                    passwordVariable: 'ACR_PASSWORD'
                )]) {
                    sh '''
                        echo "Logging into Azure Container Registry..."
                        echo $ACR_PASSWORD | docker login ${ACR_REGISTRY} -u $ACR_USERNAME --password-stdin
                    '''
                }
            }
        }

        stage('Pull from DockerHub and Push to ACR') {
            steps {
                script {
                    sh '''
                        echo "Pulling frontend image from DockerHub and pushing to ACR..."
                        docker pull ${FRONTEND_DH_IMAGE}:${IMAGE_TAG}
                        docker tag ${FRONTEND_DH_IMAGE}:${IMAGE_TAG} ${FRONTEND_ACR_IMG}:${IMAGE_TAG}
                        docker push ${FRONTEND_ACR_IMG}:${IMAGE_TAG}
                        docker tag ${FRONTEND_ACR_IMG}:${IMAGE_TAG} ${FRONTEND_ACR_IMG}:latest
                        docker push ${FRONTEND_ACR_IMG}:latest

                        echo "Pulling backend image from DockerHub and pushing to ACR..."
                        docker pull ${BACKEND_DH_IMAGE}:${IMAGE_TAG}
                        docker tag ${BACKEND_DH_IMAGE}:${IMAGE_TAG} ${BACKEND_ACR_IMG}:${IMAGE_TAG}
                        docker push ${BACKEND_ACR_IMG}:${IMAGE_TAG}
                        docker tag ${BACKEND_ACR_IMG}:${IMAGE_TAG} ${BACKEND_ACR_IMG}:latest
                        docker push ${BACKEND_ACR_IMG}:latest
                    '''
                }
            }
        }

        stage('Cleanup Workspace & Docker') {
            steps {
                sh '''
                    echo "Performing cleanup..."
                    rm -rf ${FRONTEND_PATH}/node_modules ${FRONTEND_PATH}/.next ${FRONTEND_PATH}/dist ${FRONTEND_PATH}/out ${FRONTEND_PATH}/build
                    npm cache clean --force
                    docker system prune -a -f
                    docker volume prune -f
                    find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
                    rm -rf */.next */dist */build */out
                    df -h /
                    sudo apt-get clean
                    sudo journalctl --vacuum-time=3d || true
                    sudo rm -rf /var/log/*.gz /var/log/*.1 || true
                '''
            }
        }
    }

    post {
        success {
            echo " Build, push to DockerHub & ACR, and blob upload completed successfully."
        }
        failure {
            echo " Build or push failed. Check logs for more info."
        }
    }
}
